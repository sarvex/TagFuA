/**
 * Copyright 2010-present Facebook. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and limitations under the
 * License.
 */

package com.wootag.facebook;

import java.util.UUID;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;

import com.wootag.facebook.internal.NativeProtocol;
import com.wootag.facebook.widget.FacebookDialog;

/**
 * This class helps to create, automatically open (if applicable), save, and restore the Active Session in a way that is
 * similar to Android UI lifecycles.
 * <p>
 * When using this class, clients MUST call all the public methods from the respective methods in either an Activity or
 * Fragment. Failure to call all the methods can result in improperly initialized or uninitialized Sessions.
 * <p>
 * This class should also be used by Activities that will be displaying native dialogs provided by the Facebook
 * application, in order to handle processing of the activity results generated by those dialogs.
 */
public class UiLifecycleHelper {

    private static final String DIALOG_CALL_BUNDLE_SAVE_KEY = "com.facebook.UiLifecycleHelper.pendingFacebookDialogCallKey";

    private final static String ACTIVITY_NULL_MESSAGE = "activity cannot be null";

    private final Activity activity;
    protected final Session.StatusCallback callback;
    private final BroadcastReceiver receiver;
    private final LocalBroadcastManager broadcastManager;
    // Members related to handling FacebookDialog calls
    private FacebookDialog.PendingCall pendingFacebookDialogCall;
    private AppEventsLogger appEventsLogger;

    /**
     * Creates a new UiLifecycleHelper.
     *
     * @param activity the Activity associated with the helper. If calling from a Fragment, use
     *            {@link android.support.v4.app.Fragment#getActivity()}
     * @param callback the callback for Session status changes, can be null
     */
    public UiLifecycleHelper(final Activity activity, final Session.StatusCallback callback) {

        if (activity == null) {
            throw new IllegalArgumentException(ACTIVITY_NULL_MESSAGE);
        }
        this.activity = activity;
        this.callback = callback;
        this.receiver = new ActiveSessionBroadcastReceiver();
        this.broadcastManager = LocalBroadcastManager.getInstance(activity);

        // Make sure we've loaded default settings if we haven't already.
        Settings.loadDefaultsFromMetadataIfNeeded(activity);
    }

    /**
     * Retrieves an instance of AppEventsLogger that can be used for the current Session, if any. Different instances
     * may be returned if the current Session changes, so this value should not be cached for long periods of time --
     * always call getAppEventsLogger to get the right logger for the current Session. If no Session is currently
     * available, this method will return null. To ensure delivery of app events across Activity lifecycle events,
     * calling Activities should be sure to call the onStop method.
     *
     * @return an AppEventsLogger to use for logging app events
     */
    public AppEventsLogger getAppEventsLogger() {

        final Session session = Session.getActiveSession();
        if (session == null) {
            return null;
        }

        if ((this.appEventsLogger == null) || !this.appEventsLogger.isValidForSession(session)) {
            if (this.appEventsLogger != null) {
                // Pretend we got stopped so the old logger will persist its results now, in case we get stopped
                // before events get flushed.
                AppEventsLogger.onContextStop();
            }
            this.appEventsLogger = AppEventsLogger.newLogger(this.activity, session);
        }

        return this.appEventsLogger;
    }

    /**
     * To be called from an Activity or Fragment's onActivityResult method.
     *
     * @param requestCode the request code
     * @param resultCode the result code
     * @param data the result data
     */
    public void onActivityResult(final int requestCode, final int resultCode, final Intent data) {

        this.onActivityResult(requestCode, resultCode, data, null);
    }

    /**
     * To be called from an Activity or Fragment's onActivityResult method, when the results of a FacebookDialog call
     * are expected.
     *
     * @param requestCode the request code
     * @param resultCode the result code
     * @param data the result data
     * @param dialogCallback the callback for handling FacebookDialog results, can be null
     */
    public void onActivityResult(final int requestCode, final int resultCode, final Intent data,
            final FacebookDialog.Callback facebookDialogCallback) {

        final Session session = Session.getActiveSession();
        if (session != null) {
            session.onActivityResult(this.activity, requestCode, resultCode, data);
        }

        this.handleFacebookDialogActivityResult(requestCode, resultCode, data, facebookDialogCallback);
    }

    /**
     * To be called from an Activity or Fragment's onCreate method.
     *
     * @param savedInstanceState the previously saved state
     */
    public void onCreate(final Bundle savedInstanceState) {

        Session session = Session.getActiveSession();
        if (session == null) {
            if (savedInstanceState != null) {
                session = Session.restoreSession(this.activity, null, this.callback, savedInstanceState);
            }
            if (session == null) {
                session = new Session(this.activity);
            }
            Session.setActiveSession(session);
        }
        if (savedInstanceState != null) {
            this.pendingFacebookDialogCall = savedInstanceState.getParcelable(DIALOG_CALL_BUNDLE_SAVE_KEY);
        }
    }

    /**
     * To be called from an Activity or Fragment's onDestroy method.
     */
    public void onDestroy() {

    }

    /**
     * To be called from an Activity or Fragment's onPause method.
     */
    public void onPause() {

        // remove the broadcast receiver
        this.broadcastManager.unregisterReceiver(this.receiver);

        if (this.callback != null) {
            final Session session = Session.getActiveSession();
            if (session != null) {
                session.removeCallback(this.callback);
            }
        }
    }

    /**
     * To be called from an Activity or Fragment's onResume method.
     */
    public void onResume() {

        final Session session = Session.getActiveSession();
        if (session != null) {
            if (this.callback != null) {
                session.addCallback(this.callback);
            }
            if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState())) {
                session.openForRead(null);
            }
        }

        // add the broadcast receiver
        final IntentFilter filter = new IntentFilter();
        filter.addAction(Session.ACTION_ACTIVE_SESSION_SET);
        filter.addAction(Session.ACTION_ACTIVE_SESSION_UNSET);

        // Add a broadcast receiver to listen to when the active Session
        // is set or unset, and add/remove our callback as appropriate
        this.broadcastManager.registerReceiver(this.receiver, filter);
    }

    /**
     * To be called from an Activity or Fragment's onSaveInstanceState method.
     *
     * @param outState the bundle to save state in
     */
    public void onSaveInstanceState(final Bundle outState) {

        Session.saveSession(Session.getActiveSession(), outState);
        outState.putParcelable(DIALOG_CALL_BUNDLE_SAVE_KEY, this.pendingFacebookDialogCall);
    }

    /**
     * To be called from an Activity or Fragment's onStop method.
     */
    public void onStop() {

        AppEventsLogger.onContextStop();
    }

    /**
     * Register that we are expecting results from a call to the Facebook application (e.g., from a native dialog
     * provided by the Facebook app). Activity results forwarded to onActivityResults will be parsed and handled if they
     * correspond to this call. Only a single pending FacebookDialog call can be tracked at a time; attempting to track
     * another one will cancel the first one.
     *
     * @param appCall an PendingCall object containing the call ID
     */
    public void trackPendingDialogCall(final FacebookDialog.PendingCall pendingCall) {

        if (this.pendingFacebookDialogCall != null) {
            // If one is already pending, cancel it; we don't allow multiple pending calls.
            Log.i("Facebook", "Tracking new app call while one is still pending; canceling pending call.");
            this.cancelPendingAppCall(null);
        }
        this.pendingFacebookDialogCall = pendingCall;
    }

    private void cancelPendingAppCall(final FacebookDialog.Callback facebookDialogCallback) {

        if (facebookDialogCallback != null) {
            final Intent pendingIntent = this.pendingFacebookDialogCall.getRequestIntent();

            final Intent cancelIntent = new Intent();
            cancelIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID,
                    pendingIntent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID));
            cancelIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION,
                    pendingIntent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION));
            cancelIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_VERSION,
                    pendingIntent.getIntExtra(NativeProtocol.EXTRA_PROTOCOL_VERSION, 0));
            cancelIntent.putExtra(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_UNKNOWN_ERROR);

            FacebookDialog.handleActivityResult(this.activity, this.pendingFacebookDialogCall,
                    this.pendingFacebookDialogCall.getRequestCode(), cancelIntent, facebookDialogCallback);
        }
        this.pendingFacebookDialogCall = null;
    }

    private boolean handleFacebookDialogActivityResult(final int requestCode, final int resultCode, final Intent data,
            final FacebookDialog.Callback facebookDialogCallback) {

        if ((this.pendingFacebookDialogCall == null)
                || (this.pendingFacebookDialogCall.getRequestCode() != requestCode)) {
            return false;
        }

        if (data == null) {
            // We understand the request code, but have no Intent. This can happen if the called Activity crashes
            // before it can be started; we treat this as a cancellation because we have no other information.
            this.cancelPendingAppCall(facebookDialogCallback);
            return true;
        }

        final String callIdString = data.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
        UUID callId = null;
        if (callIdString != null) {
            try {
                callId = UUID.fromString(callIdString);
            } catch (final IllegalArgumentException exception) {
            }
        }

        // Was this result for the call we are waiting on?
        if ((callId != null) && this.pendingFacebookDialogCall.getCallId().equals(callId)) {
            // Yes, we can handle it normally.
            FacebookDialog.handleActivityResult(this.activity, this.pendingFacebookDialogCall, requestCode, data,
                    facebookDialogCallback);
        } else {
            // No, send a cancellation error to the pending call and ignore the result, because we
            // don't know what to do with it.
            this.cancelPendingAppCall(facebookDialogCallback);
        }

        this.pendingFacebookDialogCall = null;
        return true;
    }

    /**
     * The BroadcastReceiver implementation that either adds or removes the callback from the active Session object as
     * it's SET or UNSET.
     */
    private class ActiveSessionBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(final Context context, final Intent intent) {

            if (Session.ACTION_ACTIVE_SESSION_SET.equals(intent.getAction())) {
                final Session session = Session.getActiveSession();
                if ((session != null) && (UiLifecycleHelper.this.callback != null)) {
                    session.addCallback(UiLifecycleHelper.this.callback);
                }
            } else if (Session.ACTION_ACTIVE_SESSION_UNSET.equals(intent.getAction())) {
                final Session session = Session.getActiveSession();
                if ((session != null) && (UiLifecycleHelper.this.callback != null)) {
                    session.removeCallback(UiLifecycleHelper.this.callback);
                }
            }
        }
    }
}
